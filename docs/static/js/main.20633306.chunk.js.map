{"version":3,"sources":["Header.js","FAQ.js","App.js","serviceWorker.js","index.js"],"names":["Header","FAQ","faq","index","toggleFAQ","console","log","window","location","hash","decodeURI","question","open","className","key","onClick","name","href","dangerouslySetInnerHTML","__html","answer","App","useState","JSON","faqs","setfaqs","title","map","i","EmailShareButton","url","subject","body","EmailIcon","size","round","FacebookShareButton","quote","hashtag","FacebookIcon","TelegramShareButton","TelegramIcon","class","alias","fallback-src","alt","height","width","src","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAUeA,MARf,WACC,OACC,gCACC,oECiBYC,MApBf,YAAwC,IAAzBC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,UAK1B,OAJAC,QAAQC,IAAIC,OAAOC,SAASC,MACzBC,UAAUH,OAAOC,SAASC,QAAU,IAAIP,EAAIS,WAC9CT,EAAIU,KAAO,QAGX,yBACCC,UAAW,QAAUX,EAAIU,KAAO,OAAS,IACzCE,IAAKX,EACLY,QAAS,WAAQR,OAAOC,SAASC,KAAK,IAAIP,EAAIS,SAASP,EAAUD,KACjE,uBAAGa,KAAMd,EAAIS,SAAUM,KAAM,IAAIf,EAAIS,WACrC,yBAAKE,UAAU,eAAeK,wBAAyB,CAAEC,OAAQjB,EAAIS,YAGrE,yBAAKE,UAAU,aAAaK,wBAAyB,CAAEC,OAAQjB,EAAIkB,Y,uDCwDvDC,MA1Df,WAAgB,IAAD,EACWC,mBAASC,GADpB,mBACNC,EADM,KACAC,EADA,OAESH,mBAASf,OAAOC,SAASS,MAFlC,gCAGaK,mBAAS,yBAHtB,mBAGNI,EAHM,KAIPtB,GAJO,KAIK,SAAAD,GAChBsB,EAAQD,EAAKG,KAAI,SAACzB,EAAK0B,GAOrB,OALE1B,EAAIU,KADFgB,IAAMzB,IACID,EAAIU,KAKXV,QAKX,OACE,yBAAKW,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACZW,EAAKG,KAAI,SAACzB,EAAK0B,GAAN,OACR,kBAAC,EAAD,CAAK1B,IAAKA,EAAKC,MAAOyB,EAAGxB,UAAWA,QAGxC,gCACE,kBAACyB,EAAA,EAAD,CACEC,IAAKvB,OAAOC,SAASS,KACrBc,QAASL,EACTM,KAAK,OACLnB,UAAU,oCAEV,kBAACoB,EAAA,EAAD,CAAWC,KAAM,GAAIC,OAAK,KAP9B,WASE,kBAACC,EAAA,EAAD,CACEN,IAAKvB,OAAOC,SAASS,KACrBoB,MAAOX,EACPb,UAAU,mCACVyB,QAAQ,WAER,kBAACC,EAAA,EAAD,CAAcL,KAAM,GAAIC,OAAK,KAfjC,WAiBE,kBAACK,EAAA,EAAD,CACEV,IAAKvB,OAAOC,SAASS,KACrBS,MAAOA,EACPb,UAAU,oCAEV,kBAAC4B,EAAA,EAAD,CAAcP,KAAM,GAAIC,OAAK,MAGjC,uBAAGO,MAAM,gBAAT,aACc,6BAASA,MAAM,UAAUC,MAAM,QAAQC,eAAa,uEAC5D,yBAAKF,MAAM,QAAQG,IAAI,QAAQC,OAAO,KAAKC,MAAM,KAAKC,IAAI,yEAFhE,OAEsJ,uBAAG/B,KAAK,KAAR,+DCtDxIgC,QACW,cAA7B1C,OAAOC,SAAS0C,UAEe,UAA7B3C,OAAOC,SAAS0C,UAEhB3C,OAAOC,SAAS0C,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.20633306.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header () {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<h1>AND If You Don't Know Now You Know</h1>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nfunction FAQ ({faq, index, toggleFAQ}) {\r\n\tconsole.log(window.location.hash);\r\n\tif(decodeURI(window.location.hash) === '#'+faq.question) {\r\n\t\tfaq.open = 'open';\r\n\t}\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={\"faq \" + (faq.open ? 'open' : '')}\r\n\t\t\tkey={index}\r\n\t\t\tonClick={() => { window.location.hash=\"#\"+faq.question;toggleFAQ(index)}}\r\n\t\t><a name={faq.question} href={\"#\"+faq.question} />\r\n\t\t\t<div className=\"faq-question\" dangerouslySetInnerHTML={{ __html: faq.question }}>\r\n\t\t\t\r\n\t\t\t</div>\r\n\t\t\t<div className=\"faq-answer\" dangerouslySetInnerHTML={{ __html: faq.answer }}>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default FAQ\r\n","import React, { useState } from 'react';\r\nimport Header from './Header';\r\nimport FAQ from './FAQ';\r\nimport JSON from './qa.json';\r\nimport {\r\n  EmailIcon,\r\n  FacebookIcon,\r\n  TelegramIcon,\r\n} from \"react-share\";\r\nimport {\r\n  EmailShareButton,\r\n  FacebookShareButton,\r\n  TelegramShareButton,\r\n} from \"react-share\";\r\nfunction App() {\r\n  const [faqs, setfaqs] = useState(JSON);\r\n  const [url, setUrl] = useState(window.location.href);\r\n  const [title, setTitle] = useState(\"Green Card Wikipedia\");\r\n  const toggleFAQ = index => {\r\n    setfaqs(faqs.map((faq, i) => {\r\n      if (i === index) {\r\n        faq.open = !faq.open\r\n      } else {\r\n        faq.open = false;\r\n      }\r\n\r\n      return faq;\r\n    }))\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div className=\"faqs\">\r\n        {faqs.map((faq, i) => (\r\n          <FAQ faq={faq} index={i} toggleFAQ={toggleFAQ} />\r\n        ))}\r\n      </div>\r\n      <header>\r\n        <EmailShareButton\r\n          url={window.location.href}\r\n          subject={title}\r\n          body=\"body\"\r\n          className=\"Demo__some-network__share-button\"\r\n        >\r\n          <EmailIcon size={32} round />\r\n        </EmailShareButton>&nbsp;&nbsp;\r\n        <FacebookShareButton\r\n          url={window.location.href}\r\n          quote={title}\r\n          className=\"Demo__some-network__share-button\"\r\n          hashtag=\"GCPedia\"\r\n        >\r\n          <FacebookIcon size={32} round />\r\n        </FacebookShareButton>&nbsp;&nbsp;\r\n        <TelegramShareButton\r\n          url={window.location.href}\r\n          title={title}\r\n          className=\"Demo__some-network__share-button\"\r\n        >\r\n          <TelegramIcon size={32} round />\r\n        </TelegramShareButton>\r\n      </header>\r\n      <p class=\"footer-heart\">\r\n          Made with <g-emoji class=\"g-emoji\" alias=\"heart\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2764.png\">\r\n            <img class=\"emoji\" alt=\"heart\" height=\"20\" width=\"20\" src=\"https://github.githubassets.com/images/icons/emoji/unicode/2764.png\" /></g-emoji> by <a href=\"#\">D.G. PD 08/2012 RD 11/22/2021 ND 12/14/2021 BM 1/26/2022</a>\r\n        </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}